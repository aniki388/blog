<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小破站~</title>
  
  
  <link href="https://chengcode.top/atom.xml" rel="self"/>
  
  <link href="https://chengcode.top/"/>
  <updated>2024-09-03T06:08:07.472Z</updated>
  <id>https://chengcode.top/</id>
  
  <author>
    <name>程</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS50 Week3 学习笔记</title>
    <link href="https://chengcode.top/posts/e85e42a5.html"/>
    <id>https://chengcode.top/posts/e85e42a5.html</id>
    <published>2024-09-02T00:56:57.988Z</published>
    <updated>2024-09-03T06:08:07.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="此篇为本人在CS50-Week3中的学习笔记"><a href="#此篇为本人在CS50-Week3中的学习笔记" class="headerlink" title="此篇为本人在CS50 Week3中的学习笔记"></a>此篇为本人在CS50 Week3中的学习笔记</h1><h2 id="一-字符串-string-char"><a href="#一-字符串-string-char" class="headerlink" title="一.字符串(string &amp; char)"></a>一.字符串(string &amp; char)</h2><p>内存中的每个字节都有一个数字位置或<em>地址</em>，由于每个字符串都是一个字符数组，因此数组中的每个字符都有连续的地址，因为它们在内存中彼此相邻存储。</p><p>因此，实际上字符串只返回<strong>字符串的第一个字符的地址</strong>。要比较字符串内容是否相同，直接用变量 <code>a == b</code> 是不行的，这相当于直接比较储存地址。</p><p>但是可以通过比较字母(charcter)间接进行比较。</p><p>字符串string实际上是 <code>char *</code> 的同义词，可以**使用<code>char *</code> 来替换 <code>string</code> ** <del>去掉学习的拐杖</del></p><p> <code>string.h</code> 库里提供函数 <code>strcmp</code> 用于比较字符串</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Get two strings</span></span><br><span class="line">    <span class="type">char</span> *s = get_string(<span class="string">&quot;s: &quot;</span>);</span><br><span class="line">    <span class="type">char</span> *t = get_string(<span class="string">&quot;t: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compare strings for equality</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(s, t) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;same\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;different\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>如果字符串相等，则返回值为字符串是否相等，如果字符串不同，则返回其他值。</li></ul><h2 id="二-指针"><a href="#二-指针" class="headerlink" title="二.指针"></a>二.指针</h2><p>指针是一种特殊的变量，他实际储存了内存地址。可以通过指针来访问可用地址的值，无效的地址是不用于存储任何内容的特殊地址，一般使用 <code>NULL 0x0</code> 来表示。</p><p>我们可以将条件 <code>s == NULL</code> 简化成 <code>!s</code> </p><h2 id="三-内存管理"><a href="#三-内存管理" class="headerlink" title="三.内存管理"></a>三.内存管理</h2><h3 id="1-分配内存"><a href="#1-分配内存" class="headerlink" title="1.分配内存"></a>1.分配内存</h3><p>若想复制字符串，则必须通过另外的方法，如创建一个新变量，并将其指向新的内存空间，并且分配一些字节数，最后传入想要的字节。</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//输入一个字符串</span></span><br><span class="line">    <span class="type">char</span> *s = get_string(<span class="string">&quot;s: &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分配内存给另一个变量</span></span><br><span class="line">    <span class="type">char</span> *j = <span class="built_in">malloc</span>((<span class="built_in">strlen</span>(s) + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));<span class="comment">//内存刚刚好；一般字节大小为1</span></span><br><span class="line">    <span class="keyword">if</span> (!j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制到新的变量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, n = <span class="built_in">strlen</span>(s); i &lt;= n;i++)<span class="comment">//别忘了包括NULL字节</span></span><br><span class="line">    &#123;</span><br><span class="line">        j[i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大写</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(j) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j[<span class="number">0</span>] = <span class="built_in">toupper</span>(j[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s: %s\n&quot;</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;j: %s\n&quot;</span>, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>借用 <code>&lt;stdlib.h&gt;</code> 库的 <code>malloc</code> 函数可以帮助我们分配内存</p></li><li><p>已知字符串的长度，因此将1加到 <code>null</code> 的字符上，确保有足够的空间</p></li><li><p>复制字符串另一种更简单的方式是直接引用 <code>&lt;string.h&gt;</code> 库中的 <code>strcpy</code> 函数，如 <strong><code>strcpy(j, s)</code></strong></p></li></ul><h3 id="2-释放内存"><a href="#2-释放内存" class="headerlink" title="2.释放内存"></a>2.释放内存</h3><p>分配内存后，如果不及时释放内存，电脑运存会不断积累，导致电脑运行速度变慢，发生卡顿甚至卡死了，可能是程序发生<strong>内存泄露</strong>。</p><p>调用函数的反操作——反分配函数(deallocate)，也就是 <code>free</code> 函数才能使内存归还给操作系统。</p><p>所以，让我们来在最后完善这段程序。</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//释放内存</span></span><br><span class="line">   <span class="built_in">free</span>(j);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-其他问题"><a href="#3-其他问题" class="headerlink" title="3.其他问题"></a>3.其他问题</h3><p>内存分配问题可以解释为什么很难从用户那里获得输入，第一种是整数类型</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%i&quot;</span>, &amp;x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x: %i\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><code>scanf</code> 是根据特点格式从用户那里获取输入的函数，我们用 <code>&amp;x</code> 来获取 <code>x</code> 的地址。</li></ul><p>但当获取一个字符串时：</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *s = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s: %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>少了一个步骤：<strong>分配内存</strong></li><li>由于我们没有为字符串的实际字节分配任何内存，因此没有地方存储输入。</li></ul><h2 id="四-记忆"><a href="#四-记忆" class="headerlink" title="四.记忆"></a>四.记忆</h2><p>每个字节都有一个地址。我们可以通过以下方式看到这一点：</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Get two strings</span></span><br><span class="line">    <span class="built_in">string</span> s = get_string(<span class="string">&quot;s: &quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> t = get_string(<span class="string">&quot;t: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print strings&#x27; addresses</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s: %p\n&quot;</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;t: %p\n&quot;</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>%p输入变量的地址（指针point）</li><li>这些值非常大，通常以十六进制的系统保存。0-9，a-f。</li><li>例如0x57dccc0c96b0，转化为10进制为96605827798704，约定俗成使用十六进制</li></ul><p>例如，我们想要实现交换 <code>swap</code></p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x is %i, y is %i\n&quot;</span>, x, y);</span><br><span class="line">    swap(&amp;x, &amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x is %i, y is %i\n&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>当在函数参数的前面标记 <code>*</code>，表示***取出改地址中存储的值***（指针）</li><li>在使用函数时在前面加 <code>&amp;</code> 表示取地址符</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;此篇为本人在CS50-Week3中的学习笔记&quot;&gt;&lt;a href=&quot;#此篇为本人在CS50-Week3中的学习笔记&quot; class=&quot;headerlink&quot; title=&quot;此篇为本人在CS50 Week3中的学习笔记&quot;&gt;&lt;/a&gt;此篇为本人在CS50 Week3中的学习</summary>
      
    
    
    
    <category term="编程" scheme="https://chengcode.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="学习笔记" scheme="https://chengcode.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CS50 Week2 学习笔记</title>
    <link href="https://chengcode.top/posts/7551a3d3.html"/>
    <id>https://chengcode.top/posts/7551a3d3.html</id>
    <published>2024-08-30T23:42:40.542Z</published>
    <updated>2024-08-31T12:20:30.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="此篇为本人在CS50-Week2中的学习笔记"><a href="#此篇为本人在CS50-Week2中的学习笔记" class="headerlink" title="此篇为本人在CS50 Week2中的学习笔记"></a>此篇为本人在CS50 Week2中的学习笔记</h1><h2 id="一-编译-Compiling"><a href="#一-编译-Compiling" class="headerlink" title="一.编译(Compiling)"></a>一.编译(Compiling)</h2><p><code>clang</code> 是我们已经学会的编译器，但是输入指令太长，这时就需要用 <code>make</code> 自动化完成这些。</p><p>将源代码“编译”成机器代码实际上由四步组成： </p><ul><li>预处理(preprocessing)</li><li>编译(compiling)</li><li>装配(assembling)</li><li>链接(linking)</li></ul><h3 id="1-预处理"><a href="#1-预处理" class="headerlink" title="1.预处理"></a>1.预处理</h3><p>一般用 <code>#</code> 标记预处理的代码。如 <code>#include&lt;stdio.h&gt;</code> 和 <code>#include&lt;cs50.h&gt;</code>。</p><p>机器在预处理时，先找到对应的头文件，并抓取内容，找到并替代了几行程序</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">string</span> <span class="title function_">get_string</span><span class="params">(<span class="built_in">string</span> prompt)</span>;<span class="comment">//返回一个字符串；输入提示词</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;<span class="comment">//返回一个整数；需要一个字符指针式的参数</span></span><br><span class="line">...</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = get_string(<span class="string">&quot;Name: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, %s\n&quot;</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h3><p>接着编译获取源代码，并将其转换为汇编语言。</p><p>这些指令是较低级的，只有CPU可以直接地理解这些抽象指令。</p><h3 id="3-装配"><a href="#3-装配" class="headerlink" title="3.装配"></a>3.装配</h3><p>然后转换这些汇编语言，转化二进制指令，实际上的0和1。</p><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h3><p>最后一步是链接，链接库里的内容并整合成二进制指令包含在程序里。</p><h2 id="二-调试"><a href="#二-调试" class="headerlink" title="二.调试"></a>二.调试</h2><p>可以从三个方面调试Bug，改进代码</p><blockquote><ol><li>用 <code>printf</code> 打印变量中的整数或者其他内容（逻辑错误）</li><li>使用 <code>help50</code> 工具（编译错误）</li><li>使用 <code>style50</code> 工具改进风格     注意代码风格，缩进等。</li></ol></blockquote><h2 id="三-数组"><a href="#三-数组" class="headerlink" title="三.数组"></a>三.数组</h2><p>数组可以帮助我们储存数据，如收集分数：</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> COUNT = <span class="number">3</span>;<span class="comment">//设定全局变量（按照惯例全部为大写，表示为一个常数）</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">chart</span><span class="params">(<span class="type">int</span> score)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Get scores from user</span></span><br><span class="line">    <span class="type">int</span> scores[COUNT];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scores[i] = get_int(<span class="string">&quot;Score %i: &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Chart scores</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Score %i: &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        chart(scores[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate bar</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">chart</span><span class="params">(<span class="type">int</span> score)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Output one hash per point</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; score; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>首先初始化数组，并依次赋值</li><li>需要访问每个索引中存储的值，<code>scores[i]</code> 。方括号内填入对应的索引，索引一般从0开始数。</li><li>const用来定义常量，他的值不会被改变。</li></ul><h2 id="四-字符串"><a href="#四-字符串" class="headerlink" title="四.字符串"></a>四.字符串</h2><p>当字符串存储在内存中时，每个字符都被放入字节网格中的一个字节中。例如，字符串Zamyla的长度是6，但是占用了7个字节，需要一个字节来指示字符串的结尾，可以写成 <code>\0</code> 。</p><p>&lt;string.h&gt;库可以调用函数<code>strlen</code>来获取字符串的长度，或者</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s = get_string(<span class="string">&quot;Name: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[n] != <span class="string">&quot;\0&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The length of your name is %i\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>由于我们知道每个字符都有一个数字 ASCII 值，我们甚至可以打印出来</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s = get_string(<span class="string">&quot;String: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c = (<span class="type">int</span>) s[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c %i\n&quot;</span>, s[i], c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>显性类型转化：获取字符并转换为整数类型 <code>(int) s[i]</code> 可以在括号()里指明要转化的类型</li><li>隐形类型转化：例如此处 <code>printf(&quot;%c %i\n&quot;, s[i], s[i]);</code>  告诉printf先打印字符，再打印整数</li></ul><h2 id="五-命令行参数"><a href="#五-命令行参数" class="headerlink" title="五.命令行参数"></a>五.命令行参数</h2><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">&gt;<span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="built_in">string</span> argv[])</span></span><br><span class="line">&gt;&#123;</span><br><span class="line">   <span class="keyword">if</span> (argc == <span class="number">2</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;hello, %s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><p> <code>argc</code> 和 <code>argv</code>[] 是得到的两个变量，一个为整数类，一个为字符串数组</p><p>程序可以接受命令行参数，给 <code>argc</code> 和 <code>argv[]</code> 赋值</p><h2 id="六-退出代码"><a href="#六-退出代码" class="headerlink" title="六.退出代码"></a>六.退出代码</h2><p>程序的返回值也被称为退出代码，一般正常运行返回值为0，错误运行返回非0的值。一般对用户是不可见或没意义的。</p><p>我们可以在终端键入，打印最后一个程序的返回值，帮助我们确定发生的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><h2 id="七-排序算法"><a href="#七-排序算法" class="headerlink" title="七.排序算法"></a>七.排序算法</h2><h3 id="1-冒泡排序-Bubble-Sort"><a href="#1-冒泡排序-Bubble-Sort" class="headerlink" title="1.冒泡排序(Bubble Sort)"></a>1.冒泡排序(Bubble Sort)</h3><p>特点是两两比对，先解决局部问题</p><h3 id="2-选择排序-Selection-Sort"><a href="#2-选择排序-Selection-Sort" class="headerlink" title="2.选择排序(Selection Sort)"></a>2.选择排序(Selection Sort)</h3><p>特点是选择最小的先排列，忽略已经排好的人。若有n个元素，会经历 n(n-1)&#x2F;2 步排序。</p><p>属于n^2数量级，用<em>O</em>（<em>n</em>^2)表示</p><p>还有其他常见的数量级：</p><ul><li><em>O</em>（<em>n</em>^2)</li><li><em>O</em>（<em>n</em> log <em>n</em>)</li><li><em>O</em>（<em>n</em>)</li><li><em>O</em>（log <em>n</em>)</li><li><em>O</em>（1）</li></ul><h3 id="3-归并排序-Merge-Sort"><a href="#3-归并排序-Merge-Sort" class="headerlink" title="3.归并排序(Merge Sort)"></a>3.归并排序(Merge Sort)</h3><p>采用分治法(Divide and Conquer)的应用，先将序列分为几个子序列分而治之，再将已有序的子序列合并，得到完全有序的序列。</p><p>数量级为<em>O</em>（log <em>n</em>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;此篇为本人在CS50-Week2中的学习笔记&quot;&gt;&lt;a href=&quot;#此篇为本人在CS50-Week2中的学习笔记&quot; class=&quot;headerlink&quot; title=&quot;此篇为本人在CS50 Week2中的学习笔记&quot;&gt;&lt;/a&gt;此篇为本人在CS50 Week2中的学习</summary>
      
    
    
    
    <category term="编程" scheme="https://chengcode.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="学习笔记" scheme="https://chengcode.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CS50 Week1 学习笔记</title>
    <link href="https://chengcode.top/posts/9308608.html"/>
    <id>https://chengcode.top/posts/9308608.html</id>
    <published>2024-08-30T03:17:05.275Z</published>
    <updated>2024-08-31T03:20:18.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="此篇为本人在CS50-Week1-的学习笔记"><a href="#此篇为本人在CS50-Week1-的学习笔记" class="headerlink" title="此篇为本人在CS50 Week1 的学习笔记"></a>此篇为本人在CS50 Week1 的学习笔记</h1><h2 id="一-编译器"><a href="#一-编译器" class="headerlink" title="一.编译器"></a>一.编译器</h2><h3 id="1-如何将源代码转化为机器语言？"><a href="#1-如何将源代码转化为机器语言？" class="headerlink" title="1.如何将源代码转化为机器语言？"></a>1.如何将源代码转化为机器语言？</h3><p>使用编译器而不是用0,1写程序，传统方法从输入源代码到输入机器语音共经历了：</p><p>source code(源代码) &#x3D;&gt; compiler(编译器) &#x3D;&gt; machine code（机器代码）</p><h3 id="2-终端-terminal"><a href="#2-终端-terminal" class="headerlink" title="2.终端(terminal)"></a>2.终端(terminal)</h3><p>例如，我们创建一个名为hello.c的文件</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>Tips:</p><blockquote><p>为了使用printf函数，我们需要用include引入的库文件stdio.h</p><p>.h 代表header</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ clang hello.c</span><br><span class="line">$ .a/a.out</span><br><span class="line">hello,world</span><br></pre></td></tr></table></figure><p>出现一个后缀为 .out 的文件(汇编语言),运行后输出 hello,world</p><p>Tips:</p><blockquote><ol><li>$ 一般表示提示符，闪烁代表等待用户输入指令</li><li>.a 在相当于双击的操作</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ clang -o hello hello.c</span><br><span class="line">$ ./hello</span><br><span class="line">hello,world</span><br></pre></td></tr></table></figure><p>出现一个叫 hello 的文件，运行后输出 hello,world</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make hello</span><br><span class="line">$ ./hello</span><br></pre></td></tr></table></figure><p>make函数可以帮助我们快速编译文件</p><p>更多前端指令:</p><blockquote><ul><li>Ctrl + Z 取消当前命令</li></ul></blockquote><h2 id="二-C语言初步"><a href="#二-C语言初步" class="headerlink" title="二.C语言初步"></a>二.C语言初步</h2><h3 id="1-打印-print"><a href="#1-打印-print" class="headerlink" title="1.打印(print)"></a>1.打印(print)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>); <span class="comment">/* 注意为printf格式化输出 /*</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>Tips：</p><blockquote><ol><li><p>通常在语句后面加上<code>;</code></p></li><li><p><code>\n</code> 转义字符表换行</p></li><li><p>空格无意义，只是为了方便看懂</p></li><li><p>print()里要打””，表示字符串(string)</p></li></ol></blockquote><h3 id="2-变量-variables"><a href="#2-变量-variables" class="headerlink" title="2.变量(variables)"></a>2.变量(variables)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> counter = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>int表示储存的是整数类型(integer)的变量，这段代码中counter为变量，</p><p>&#x3D;表示的是赋值：右边的值赋值到左边</p><h3 id="3-条件-conditionals"><a href="#3-条件-conditionals" class="headerlink" title="3.条件(conditionals)"></a>3.条件(conditionals)</h3><h4 id="假设-if"><a href="#假设-if" class="headerlink" title="假设(if)"></a>假设(if)</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x is less then y\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x is greater than y\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x is equal to y\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips:</p><blockquote><ol><li>由于&#x3D;为赋值，所以用<code>==</code>表示等号(equal)若想表示大于等于或小于等于可以使用<code>&gt;=</code> 和<code>&lt;=</code></li><li>因为只有三种情况，故第三种假设是多余的，可以改用else。也被称为<strong>过度优化</strong>，有时为了方便他人理解可以保留</li></ol></blockquote><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>true为布尔值，类似的<strong>布尔类型</strong>的值还有false</p><p>当while判断为true时重复执行下面的代码，直到判定为false</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义整数i为变量，确认i是否小于50，执行代码</p><p>其中i++运行时 i 的值会加1，还可以这样表示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = i + <span class="number">1</span></span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这段代码会执行51遍，会输出50遍<code>hello,world</code>。直到 i &#x3D; 50显然i &lt; 50为false，代码停止执行</p><h4 id="do循环"><a href="#do循环" class="headerlink" title="do循环"></a>do循环</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prompt user for positive integer</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_positive_int</span><span class="params">(<span class="built_in">string</span> prompt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = get_int(<span class="string">&quot;%s&quot;</span>, prompt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>do循环会先执行一遍代码，在判断是否为true。相当于至少执行一次的 while 函数</p><p>这是反转运行顺序的一种方法</p><p>示例函数会让用户一直输入整数，直到用户输入正数时返回这个值。</p><h3 id="4-函数-function"><a href="#4-函数-function" class="headerlink" title="4.函数(function)"></a>4.函数(function)</h3><h4 id="定义新函数cough-例子"><a href="#定义新函数cough-例子" class="headerlink" title="定义新函数cough(例子)"></a>定义新函数cough(例子)</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cough</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//复制原函数，声明函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cough();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cough once</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cough</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cough\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>Tips:</p><ul><li>我们用 cough(<strong>void</strong>) 表示不接受<strong>输入</strong>，所以写关键字<strong>void</strong>，且<strong>不返回值</strong>的函数，所以写左边加<strong>void</strong> （ <code>main</code> 函数同理，正常运行返回0 ）</li><li>只需要复制原函数的第一行，分号结束，相当于直接复制粘贴原函数（需先声明函数，才可以调用函数）</li></ul><p>我们还可以做出改进</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cough</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cough(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cough some number of times</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cough</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;cough\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>Tips:</p><ul><li>cough函数里加入for循环，调用时cough()里输入整数 <code>n</code> ，即可循环 <code>n-1</code> 次（原理见代码）</li></ul><h4 id="get-string-通过用户键入得到输入"><a href="#get-string-通过用户键入得到输入" class="headerlink" title="get_string (通过用户键入得到输入)"></a>get_string (通过用户键入得到输入)</h4><p>注：这并不是C自带的，为CS50定制的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> answer = get_string(<span class="string">&quot;What&#x27;s your name?\n&quot;</span>)</span><br><span class="line"><span class="built_in">printf</span>(hello,<span class="string">&quot;%s\n&quot;</span>, answer)</span><br></pre></td></tr></table></figure><p>get_string 函数会**返回(return)**用户键入的值，将这个值存储在 answer 的变量里</p><p>Tips:</p><blockquote><ol><li>%s 是一个占位符 S表示字符串(String)</li><li>占位符会从左到右插入变量</li><li>使两个字符串连接起来</li></ol></blockquote><p>cs50还有很多类似的函数，可以自己尝试：</p><ul><li><code>get_char</code></li><li><code>get_double</code></li><li><code>get_float</code></li><li><code>get_int</code></li><li><code>get_long</code></li><li><code>get_string</code></li><li>…</li></ul><p>还有对应类型的<strong>占位符</strong>：</p><ul><li><code>bool</code></li><li><code>char</code>, <code>%c</code></li><li><code>double</code></li><li><code>float</code>, <code>%f</code></li><li><code>int</code>, <code>%i</code></li><li><code>long</code>, <code>%li</code></li><li><code>string</code>, <code>%s</code></li></ul><p>Tips:</p><blockquote><ol><li>在 <code>%</code> 和 <code>f</code> 之间加入.和一个数字，这个数字代表精准到小数点后几位数</li></ol></blockquote><h3 id="5-数学运算-math"><a href="#5-数学运算-math" class="headerlink" title="5.数学运算(math)"></a>5.数学运算(math)</h3><p>在 <code>ints.c</code> ，我们能做些数学运算</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Prompt user for x</span></span><br><span class="line">    <span class="type">int</span> x = get_int(<span class="string">&quot;x: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prompt user for y</span></span><br><span class="line">    <span class="type">int</span> y = get_int(<span class="string">&quot;y: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform arithmetic</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x + y = %i\n&quot;</span>, x + y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x - y = %i\n&quot;</span>, x - y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x * y = %i\n&quot;</span>, x * y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x / y = %i\n&quot;</span>, x / y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x mod y = %i\n&quot;</span>, x % y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>Tips:</p><ul><li>加 + ，减 - ，乘 * ，除 &#x2F; ，取模（取余） %.</li><li>取模经常应用在判断整数的奇偶性</li></ul><h3 id="6-内存（memory）"><a href="#6-内存（memory）" class="headerlink" title="6.内存（memory）"></a>6.内存（memory）</h3><p>我们的电脑拥有内存，硬件上有内存条RAM，全称random-access memory，使用RAM来存储运行程序的数据，但是这种内存是<strong>有限</strong>的。</p><p>在内存<em>有限</em>的情况下，该如何表现<em>无限</em>的数字？计算机有能够显示的最大精度。</p><p>于是在 <code>floats.c</code> 文件中</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Prompt user for x</span></span><br><span class="line">    <span class="type">float</span> x = get_float(<span class="string">&quot;x: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prompt user for y</span></span><br><span class="line">    <span class="type">float</span> y = get_float(<span class="string">&quot;y: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform division</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x / y = %.50f\n&quot;</span>, x / y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>我们得到了以下不符合常识的结果</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x: <span class="number">2</span></span><br><span class="line">y: <span class="number">10</span></span><br><span class="line">x / y = <span class="number">0.20000000298023223876953125000000000000000000000000</span></span><br></pre></td></tr></table></figure></blockquote><p>为了增大精度，我们可以改用<strong>双精度浮点数</strong> <code>double</code> 类型</p><p> 修改文件</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Prompt user for x</span></span><br><span class="line">    <span class="type">double</span> x = get_double(<span class="string">&quot;x: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Prompt user for y</span></span><br><span class="line">    <span class="type">double</span> y = get_double(<span class="string">&quot;y: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform division</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x / y = %.50f\n&quot;</span>, x / y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>输出结果，精度确实得到了提升</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x: <span class="number">2</span></span><br><span class="line">y: <span class="number">10</span></span><br><span class="line">x / y = <span class="number">0.20000000000000001110223024625156540423631668090820</span></span><br></pre></td></tr></table></figure></blockquote><ul><li>我们于此也发现了问题，x &#x2F; y的结果与正确运算结果0.2似乎不相等。<strong>因此 <code>float</code> 无法进行相等比较</strong></li><li>无法解决有高精度需求的领域的这类问题</li><li>双精度浮点数比浮点数更占内存</li></ul><h3 id="7-逻辑"><a href="#7-逻辑" class="headerlink" title="7.逻辑"></a>7.逻辑</h3><p>在 answer.c 文件中，我们能获取用户输入的文本:</p><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cs50.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Prompt user for answer</span></span><br><span class="line">    <span class="type">char</span> c = get_char(<span class="string">&quot;Answer: &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check answer</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;N&#x27;</span> || c == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li>cs50环境下的函数 <code>get_char</code> 可以获得用户输入的单一字母</li><li>注意到使用 <code>||</code> 表示 “or” 即或者，满足其中一项返回true</li></ul><h3 id="8-作用域-scope"><a href="#8-作用域-scope" class="headerlink" title="8.作用域(scope)"></a>8.作用域(scope)</h3><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prompt user for positive integer</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_positive_int</span><span class="params">(<span class="built_in">string</span> prompt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = get_int(<span class="string">&quot;%s&quot;</span>, prompt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>在上文中 do循环 案例里，为什么不能写成这样？</p><p>因为函数是拥有<strong>作用域</strong>的，作用域是指变量<strong>只在一定范围内</strong>存在</p><p>这个范围为：<strong>它们被声明的那一对大括号里</strong>，这意味着变量 <code>n</code> 只存在于do{}内</p><p>作用域决定了你需要的是<strong>全局变量</strong>还是<strong>局部变量</strong>。</p><h3 id="9-其他问题"><a href="#9-其他问题" class="headerlink" title="9.其他问题"></a>9.其他问题</h3><ul><li>目前为止已发现浮点不精准的问题，但是整数也可能会发生问题</li><li>因为只有32位用于存储数字（2的32次方约为40亿），若存储的数字超过这个数就会无法存储，所以变成负数或者0，称之为 <code>overflow</code> 错误</li><li>还存在整数下溢问题，<del>例如核爆甘地</del></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;此篇为本人在CS50-Week1-的学习笔记&quot;&gt;&lt;a href=&quot;#此篇为本人在CS50-Week1-的学习笔记&quot; class=&quot;headerlink&quot; title=&quot;此篇为本人在CS50 Week1 的学习笔记&quot;&gt;&lt;/a&gt;此篇为本人在CS50 Week1 的学习</summary>
      
    
    
    
    <category term="编程" scheme="https://chengcode.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="学习笔记" scheme="https://chengcode.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Adobe Photoshop常见快捷键整理</title>
    <link href="https://chengcode.top/posts/12345678.html"/>
    <id>https://chengcode.top/posts/12345678.html</id>
    <published>2024-08-25T08:25:10.936Z</published>
    <updated>2024-08-28T10:39:10.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此篇为本人学习<strong>PS</strong>过程中的学习笔记，仅供参考</p><p>2024年8月25日16:46:41</p><h1 id="快捷键总结"><a href="#快捷键总结" class="headerlink" title="快捷键总结"></a>快捷键总结</h1><blockquote><ul><li><strong>画笔工具</strong></li></ul></blockquote><p>快捷键：<code>B</code>，右键使用笔刷：硬币圆。</p><p>画笔粗细调整快捷键：<code>【</code>和<code>】</code>分别用于缩小画笔和放大画笔的功能。</p><blockquote><ul><li><strong>放大&#x2F;缩小</strong></li></ul></blockquote><p>快捷键：<code>Ctrl</code> + <code>Space</code> ，左键鼠标进行左右挪动</p><blockquote><ul><li><strong>橡皮擦</strong></li></ul></blockquote><p>快捷键：<code>E</code></p><p>缩小&#x2F;放大 橡皮擦：使用<code>【</code>和<code>】</code>进行调整</p><blockquote><ul><li><strong>撤回</strong></li></ul></blockquote><p>快捷键：<code>Ctrl</code> + <code>Z</code></p><blockquote><ul><li><strong>旋转工具</strong></li></ul></blockquote><p>用处：调整到顺手的角度</p><p>快捷键：<code>R</code> + 左键鼠标进行</p><p>复位快捷键：<code>ESC</code> + <code>R</code></p><blockquote><ul><li><strong>矩形工具</strong></li></ul></blockquote><p>用处：选取涂色</p><p>快捷键：<code>M</code></p><p>增加&#x2F;减少 快捷键：增加 <code>Shift</code> 减少 <code>Alt</code></p><p>取消选区快捷键：<code>Ctrl</code> + <code>D</code></p><blockquote><ul><li>复制</li></ul></blockquote><p>快捷键：<code>Ctrl</code> + <code>Alt</code></p><p>可以搭配选取工具使用</p><blockquote><ul><li>直线工具</li></ul></blockquote><p>先选取画笔工具</p><p>快捷键：长按 <code>Shift</code>  激活</p><blockquote><ul><li>颜色</li></ul></blockquote><p>快捷键：<code>F6</code></p><blockquote><ul><li>自由变换工具</li></ul></blockquote><p>快捷键：<code>Ctrl</code> + <code>T</code></p><blockquote><ul><li>HSB滑块</li></ul></blockquote><p>H：色相</p><p>S：饱和度</p><p>B：明度</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>小总结：</p><ol><li>下笔一定要<strong>快</strong></li><li>画错了可以<strong>撤回</strong></li><li>画不顺手按<strong>旋转工具</strong></li><li>需要涂色用<strong>选取工具</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;此篇为本人学习&lt;strong&gt;PS&lt;/strong&gt;过程中的学习笔记，仅供参考&lt;/p&gt;
&lt;p&gt;2024年8月25日16:46:41&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程" scheme="https://chengcode.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Photoshop" scheme="https://chengcode.top/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>思维升级：让说话有逻辑</title>
    <link href="https://chengcode.top/posts/84f3211d.html"/>
    <id>https://chengcode.top/posts/84f3211d.html</id>
    <published>2024-08-24T08:04:23.437Z</published>
    <updated>2024-08-25T09:30:14.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章旨在提升自己的逻辑思维能力，帮助我们在学习，职场中掌握有效沟通的关键要素，提升沟通效果，达到说服别人，高效学习和工作，获得自信的效果，使自己的发言在日常工作中更易受到重视，更有价值。</p><h2 id="让思考更全面"><a href="#让思考更全面" class="headerlink" title="让思考更全面"></a>让思考更全面</h2><p>考虑一件事情的时候，不能只考虑他最显而易见的因素，只纠结在一个方面，会导致不断纵向深挖获得对策，却忽略了其他方面的可能。</p><p>遇到思维困境时，往往要反问自己是否做到<strong>全面，多角度地思考</strong>。</p><blockquote><p>尝试在直接想答案这个思维之前，要从更<strong>源头</strong>方面去多角度思考，找到它的<strong>结构</strong></p></blockquote><h2 id="一-结构化思维"><a href="#一-结构化思维" class="headerlink" title="一.结构化思维"></a>一.结构化思维</h2><p>我推荐这本《金字塔原理》经典培训教材，能帮助我们把<strong>零碎的想法</strong>转化为<strong>结构化的信息</strong>，便于大脑理解和记忆。</p><h3 id="①金字塔塔尖：结论先行"><a href="#①金字塔塔尖：结论先行" class="headerlink" title="①金字塔塔尖：结论先行"></a>①金字塔塔尖：<strong>结论先行</strong></h3><p>先说结论，结论先行的优点有：</p><ol><li>有效传达信息</li><li>节省时间和精力</li><li>给领导留下好印象</li></ol><p>大脑提前了解结论：<strong>了解结论→将信息归类→建立结论与信息间的联系</strong></p><p>大脑没有提前了解结论：<strong>困惑→试图了结各信息之间的联系→产生负面情绪</strong></p><p>先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果后过程，先论点后论据。</p><p>学习案例：</p><ul><li>政府报告</li><li>媒体</li><li>咨询行业</li></ul><h3 id="②信息分类"><a href="#②信息分类" class="headerlink" title="②信息分类"></a>②信息分类</h3><p>信息分类的优点有：</p><ol><li>对自己：表达清晰全面</li><li>对他人：易于理解和记忆（重要）</li></ol><p>如何做好分类？<strong>MECE原则</strong></p><ol><li>要求：不能重叠，不能遗漏</li><li>同一维度，一分到底</li></ol><p>所有事物至少可以分出来两个不同的方向</p><h4 id="分类方法："><a href="#分类方法：" class="headerlink" title="分类方法："></a>分类方法：</h4><h5 id="①自上而下演绎法：从金字塔的顶端往下演绎"><a href="#①自上而下演绎法：从金字塔的顶端往下演绎" class="headerlink" title="①自上而下演绎法：从金字塔的顶端往下演绎"></a>①自上而下演绎法：从金字塔的顶端往下演绎</h5><p>优点：效率高，快速实现问题结构化</p><p>方法：找到恰当的分解角度，需要<strong>足够的知识储备</strong></p><h5 id="②自下而上归纳法：发散思维，归纳总结"><a href="#②自下而上归纳法：发散思维，归纳总结" class="headerlink" title="②自下而上归纳法：发散思维，归纳总结"></a>②自下而上归纳法：发散思维，归纳总结</h5><ol><li>列出相关信息，想到什么先写下来</li><li>找共性和差异，合并同类项</li><li>以点带面，得出结论</li></ol><h2 id="二-逻辑递进"><a href="#二-逻辑递进" class="headerlink" title="二.逻辑递进"></a>二.逻辑递进</h2><p>四个结构：顺序结构，时间结构，空间结构，重要性结构</p><h3 id="①顺序结构"><a href="#①顺序结构" class="headerlink" title="①顺序结构"></a>①顺序结构</h3><p>把你要说的内容按照逻辑顺序展开，例如：一个行业可以分为“上游，中游，下游”</p><p>写作时可以分为“开头，中间，结尾”，行动可以分为“准备阶段，执行步骤，结果总结”</p><h3 id="②时间结构"><a href="#②时间结构" class="headerlink" title="②时间结构"></a>②时间结构</h3><ul><li>过去，现在，未来适用场景（做总结&#x2F;发言&#x2F;汇报演讲）</li></ul><p>可以把看似没有联系的事物，按照<strong>时间线</strong>联系成一个清晰的有逻辑的结构，而且<strong>有力量</strong>（具体参见各种演讲）</p><h3 id="③空间结构"><a href="#③空间结构" class="headerlink" title="③空间结构"></a>③空间结构</h3><ul><li>明确的地理位置梳理讲话逻辑适用场景（工作场合）</li></ul><h3 id="④重要性结构"><a href="#④重要性结构" class="headerlink" title="④重要性结构"></a>④重要性结构</h3><ul><li>按重要性排序，先说重点适用场景（事物包含多个原因）</li></ul><p>可以有效防止未说到重点，就被强行打断施法</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>金字塔原理为我们总结了一种结构化思维的思维方式，不仅是在写作和演讲中，还是生活工作等大部分领域都是有效的，</p><p>合理地运用金字塔原理才可以发挥它的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇文章旨在提升自己的逻辑思维能力，帮助我们在学习，职场中掌握有效沟通的关键要素，提升沟通效果，达到说服别人，高效学习和工作，获得自信的效果</summary>
      
    
    
    
    <category term="生活日常" scheme="https://chengcode.top/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="思维提升" scheme="https://chengcode.top/tags/%E6%80%9D%E7%BB%B4%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法大全</title>
    <link href="https://chengcode.top/posts/44ed1e9b.html"/>
    <id>https://chengcode.top/posts/44ed1e9b.html</id>
    <published>2024-08-23T05:39:34.267Z</published>
    <updated>2024-08-26T06:56:52.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法总结（初学）2024-8-23更新（半成品）"><a href="#Markdown语法总结（初学）2024-8-23更新（半成品）" class="headerlink" title="Markdown语法总结（初学）2024&#x2F;8&#x2F;23更新（半成品）"></a>Markdown语法总结（初学）2024&#x2F;8&#x2F;23更新（半成品）</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言</strong>：</h2><p>Markdown是一种轻量级标记语言，排版语法简洁，十分适合用于日常写作记录。</p><p>同时献上<a href="https://markdown.com.cn/basic-syntax/">Markdown 官方教程</a></p><p>本人总结Markdown有以下几个<strong>优点</strong>：</p><ol><li>语法十分简单，常见标记符号少，掌握的<strong>时间成本低</strong></li><li>使用十分简单，排版<strong>简洁，高效</strong>，<strong>沉浸式记录</strong>不二之选</li><li>可与HTML混编，可导出 <strong>HTML、PDF，</strong>使用于大部分场合</li></ol><hr><h2 id="标题："><a href="#标题：" class="headerlink" title="标题："></a><strong>标题</strong>：</h2><p>使用<code>#</code> 来表示标题<strong>（注意#后面需要跟空格）</strong>。<code>#</code> 的数量代表了标题的级别，随着#增加而递减。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 最大标题</span></span><br><span class="line"><span class="section">## 次级标题</span></span><br><span class="line">...以此类推</span><br><span class="line"><span class="section">###### 最小标题</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><h1 id="最大标题"><a href="#最大标题" class="headerlink" title="最大标题"></a>最大标题</h1><h2 id="次级标题"><a href="#次级标题" class="headerlink" title="次级标题"></a>次级标题</h2><h6 id="最小标题"><a href="#最小标题" class="headerlink" title="最小标题"></a>最小标题</h6></blockquote><h2 id="强调："><a href="#强调：" class="headerlink" title="强调："></a><strong>强调</strong>：</h2><p>Markdown有三种强调语法，分别为粗体（Bold），斜体（Italic），删除线，以下展示常见用法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**我是粗体**</span></span><br><span class="line"><span class="emphasis">*我是斜体*</span></span><br><span class="line">~~我被删除了(<span class="emphasis">*/ω＼*</span>)~~（注意是两个波浪号）</span><br></pre></td></tr></table></figure><h2 id="列表："><a href="#列表：" class="headerlink" title="列表："></a><strong>列表</strong>：</h2><p>①使用<code>-</code>, <code>+</code>, 或 <code>*</code>创建无序列表。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 我是第一项</span><br><span class="line"><span class="bullet">-</span> 我是第二项</span><br><span class="line"><span class="bullet">  -</span> 子列表项一</span><br><span class="line"><span class="bullet">  -</span> 子列表项二</span><br></pre></td></tr></table></figure><blockquote><ul><li>我是第一项</li><li>我是第二项<ul><li>子列表项一</li><li>子列表项二</li></ul></li></ul></blockquote><p>②有序列表使用数字后跟点来创建。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a><strong>链接</strong>：</h2><h3 id="①超链接Markdown语法"><a href="#①超链接Markdown语法" class="headerlink" title="①超链接Markdown语法"></a>①超链接Markdown语法</h3><p><code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title是当鼠标悬停在链接上时会出现的文字</p><p>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Markdown语法总结</span>](<span class="link">http://localhost:4000/posts/44ed1e9b.html &quot;站长总结&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>渲染效果：<a href="http://localhost:4000/posts/44ed1e9b.html" title="站长总结">Markdown语法总结</a></p></blockquote><h3 id="②网址和Email地址"><a href="#②网址和Email地址" class="headerlink" title="②网址和Email地址"></a>②网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;https://chengcode.top&gt;</span></span><br><span class="line">&lt;3069859233@qq.com&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>渲染效果:</p><p><a href="https://chengcode.top/">https://chengcode.top</a><br><a href="mailto:&#51;&#48;&#x36;&#x39;&#56;&#x35;&#x39;&#50;&#x33;&#51;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#51;&#48;&#x36;&#x39;&#56;&#x35;&#x39;&#50;&#x33;&#51;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a></p></blockquote><h3 id="③带格式化的链接"><a href="#③带格式化的链接" class="headerlink" title="③带格式化的链接"></a>③带格式化的链接</h3><p>强调链接，在链接语法前后增加星号。</p><p><code>I like my  **[blog](chengcode.top)**</code></p><blockquote><p>I like my  <strong><a href="chengcode.top">blog</a></strong></p></blockquote><h2 id="引用："><a href="#引用：" class="headerlink" title="引用："></a><strong>引用</strong>：</h2><p>使用<code>&gt;</code>来创建引用</p><blockquote><p><code>&gt;危楼高百尺，手可摘星辰。</code>  </p><p><code>&gt;不敢高声语，恐惊天上人。</code></p></blockquote><p>效果如下</p><blockquote><p>危楼高百尺，手可摘星辰。</p><p>不敢高声语，恐惊天上人。</p></blockquote><h2 id="表格："><a href="#表格：" class="headerlink" title="表格："></a><strong>表格</strong>：</h2><p>使用<code>|</code>和<code>---</code>来创建表格。</p><blockquote><p><code>|标题一|标题二|标题三|</code></p><p><code>|------|------|------|</code></p><p><code>|单元格一|单元格二|单元格三|</code></p><p><code>|单元格四|单元格五|单元格六|</code></p></blockquote><table><thead><tr><th>标题一</th><th>标题二</th><th>标题三</th></tr></thead><tbody><tr><td>单元格一</td><td>单元格二</td><td>单元格三</td></tr><tr><td>单元格四</td><td>单元格五</td><td>单元格六</td></tr></tbody></table><!-- ## 数学公式：①用美元符`$`包裹要表达的公式，例如：> 这是一个公式：$y = x + 3$这是一个公式：$y = x + 3$②独立公式：用两个*连续的*`$`包裹，换行的话在行尾添加`\`> 这是一个独占一行的公式：$$y = x + 3 \\ \ y = x - 3这是一个独占一行的公式：$$y = x + 3$$$$y = x - 3$$③加减乘除加 `+` ，减 `-` ，乘 `\times` ，除 `\div` 。例如：> 加减乘除：$$y=x+3$$  $$y=x-3$$  $$y=x\times3$$  $$y=x\div3$$加减乘除：$$y=x+3$$$$y=x-3$$$$y=x\times3$$$$y=x\div3$$④上标下标上标 `^`（键盘6的位置），下标 `_` 例如：> 上标下标：$$x^3$$  $$H_2O$$   $$S_{input}$$ 注：多字符要使用{}包裹住上标下标：$$x^3$$$$H_2O$$$$S_{input}$$⑤Σ求和与根号西格玛求和 `\sum` ，根号 `\sqrt[这里填根指数`] ，例如：> 求和与根号：$$\sum(x^2+y^2)$$  $$\sqrt[3]x$$求和与根号：$$\sum(x^2+y^2)$$$$\sqrt[3]x$$⑥分数线用 `\frac` 连接两个用{}包裹的字符串，例如> 分数线：$$\frac{x+y}{x-y}$$分数线：$$\frac{x+y}{x-y}$$ -->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown语法总结（初学）2024-8-23更新（半成品）&quot;&gt;&lt;a href=&quot;#Markdown语法总结（初学）2024-8-23更新（半成品）&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法总结（初学）2024&amp;#x2F;8&amp;</summary>
      
    
    
    
    <category term="编程" scheme="https://chengcode.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Markdown" scheme="https://chengcode.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>自我介绍</title>
    <link href="https://chengcode.top/posts/bdae0d9b.html"/>
    <id>https://chengcode.top/posts/bdae0d9b.html</id>
    <published>2024-08-22T21:18:22.270Z</published>
    <updated>2024-08-30T09:47:34.683Z</updated>
    
    <content type="html"><![CDATA[<p>Hello!!!我是一名即将步入<strong>大一</strong>的计算机小白。这也是我发布的<strong>第一篇博客</strong>~</p><h2 id="关于我是如何想起写博客呢？"><a href="#关于我是如何想起写博客呢？" class="headerlink" title="关于我是如何想起写博客呢？"></a>关于我是如何想起写博客呢？</h2><ul><li>第一：写博客可以<strong>记录我的学习笔记</strong>，方便自己翻阅与使用，<del>或许也可以帮助到其他有需要的人</del></li><li>第二：展示我的优缺点，方便得到指点</li><li>第三：使我养成<strong>学习</strong>的好习惯</li></ul><h3 id="目前阶段学习目标（大一）："><a href="#目前阶段学习目标（大一）：" class="headerlink" title="目前阶段学习目标（大一）："></a>目前阶段学习目标（大一）：</h3><ol><li>学习CS50，入门C语言</li><li>学习cmake，git如何使用</li><li>学习算法，刷很多题</li></ol><hr><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语:"></a>结束语:</h2><blockquote><p><em>The only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle</em>.<br>成就的唯一途徑是熱愛自己的事業，如果你還沒找到的話，繼續尋找，不要屈就。<br> — Steve Jobs<br> 希望我们能保持着对编程的热爱</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello!!!我是一名即将步入&lt;strong&gt;大一&lt;/strong&gt;的计算机小白。这也是我发布的&lt;strong&gt;第一篇博客&lt;/strong&gt;~&lt;/p&gt;
&lt;h2 id=&quot;关于我是如何想起写博客呢？&quot;&gt;&lt;a href=&quot;#关于我是如何想起写博客呢？&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="生活日常" scheme="https://chengcode.top/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="自我介绍" scheme="https://chengcode.top/tags/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chengcode.top/posts/4a17b156.html"/>
    <id>https://chengcode.top/posts/4a17b156.html</id>
    <published>2024-08-22T07:04:16.341Z</published>
    <updated>2024-08-23T11:09:13.754Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="编程" scheme="https://chengcode.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
